<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
	default-autowire="byName" default-lazy-init="true">
    
    <bean id="dataSourceInfo" class="pw.cdmi.core.db.dao.DataSourceInfo">
    	<property name="dbCount" value="1" />
    </bean>
    
    <bean id="cobarDataSources" class="com.alibaba.cobar.client.datasources.DefaultCobarDataSourceService">
        <property name="dataSourceDescriptors">
            <set>
                <bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="partition0" />
                    <property name="targetDataSource" ref="dcsysdb" />
                    <property name="targetDetectorDataSource" ref="dcsysdb" />
                </bean>
                <bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="partition1" />
                    <property name="targetDataSource" ref="fileobjectdb_1" />
                    <property name="targetDetectorDataSource" ref="fileobjectdb_1" />
                </bean>
            </set>
        </property>
    </bean>
    
    <bean id="dcsysdb" class="pw.cdmi.common.alarm.AlarmAbleDataSource" destroy-method="close">
		<property name="exceptionKeyWord" value="Timeout waiting for idle object" />
		<property name="alarmHelper" ref="alarmHelper" />
		
		<property name="driverClassName" value="${jdbc.dcsysdb.driverClassName}" />
        <property name="url" value="${jdbc.dcsysdb.url}" />
        <property name="username" value="${jdbc.dcsysdb.username}" />
        <property name="password" value="${jdbc.dcsysdb.password}" />
		<property name="initialSize" value="${jdbc.dcsysdb.pool.initialSize}" />
		<property name="maxActive" value="${jdbc.dcsysdb.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.dcsysdb.pool.maxIdle}" />
		<property name="minIdle" value="${jdbc.dcsysdb.pool.minIdle}" />
		<property name="maxWait" value="${jdbc.dcsysdb.pool.maxWait}" />
		<property name="testWhileIdle" value="${jdbc.dcsysdb.pool.testWhileIdle}" />
		<property name="testOnReturn" value="${jdbc.dcsysdb.pool.testOnReturn}" />
		<property name="testOnBorrow" value="${jdbc.dcsysdb.pool.testOnBorrow}" />
		<property name="validationQuery" value="${jdbc.dcsysdb.pool.validationQuery}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.dcsysdb.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.dcsysdb.pool.minEvictableIdleTimeMillis}" />
	</bean>
    
    <bean id="baseFileObjectDB" abstract="true">  
    	<property name="exceptionKeyWord" value="Timeout waiting for idle object" />
		<property name="alarmHelper" ref="alarmHelper" />
		
        <property name="driverClassName" value="${jdbc.fileobjectdb.driverClassName}" />
        <property name="username" value="${jdbc.fileobjectdb.username}" />
        <property name="password" value="${jdbc.fileobjectdb.password}" />
		<property name="initialSize" value="${jdbc.fileobjectdb.pool.initialSize}" />
		<property name="maxActive" value="${jdbc.fileobjectdb.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.fileobjectdb.pool.maxIdle}" />
		<property name="minIdle" value="${jdbc.fileobjectdb.pool.minIdle}" />
		<property name="maxWait" value="${jdbc.fileobjectdb.pool.maxWait}" />
		<property name="testWhileIdle" value="${jdbc.fileobjectdb.pool.testWhileIdle}" />
		<property name="testOnReturn" value="${jdbc.fileobjectdb.pool.testOnReturn}" />
		<property name="testOnBorrow" value="${jdbc.fileobjectdb.pool.testOnBorrow}" />
		<property name="validationQuery" value="${jdbc.fileobjectdb.pool.validationQuery}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.fileobjectdb.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.fileobjectdb.pool.minEvictableIdleTimeMillis}" />
    </bean>  
    
    <bean id="fileobjectdb_1" class="pw.cdmi.common.alarm.AlarmAbleDataSource" destroy-method="close" parent="baseFileObjectDB">
        <property name="url" value="${jdbc.fileobjectdb_1.url}" />
    </bean>
    
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dcsysdb" />
        <property name="configLocation" value="classpath:mapping/sqlmap-config.xml" />
    </bean>

    <bean id="sqlMapClientTemplate" class="com.alibaba.cobar.client.CobarSqlMapClientTemplate">
        <property name="sqlMapClient" ref="sqlMapClient" />
        <property name="cobarDataSourceService" ref="cobarDataSources" />
        <property name="router" ref="internalRouter" />
        <property name="sqlAuditor">
            <bean class="com.alibaba.cobar.client.audit.SimpleSqlAuditor" />
        </property>
        <property name="profileLongTimeRunningSql" value="true" />
        <property name="longTimeRunningSqlIntervalThreshold" value="3600000" />
    </bean>

    <bean id="internalRouter" class="com.alibaba.cobar.client.router.config.CobarInteralRouterXmlFactoryBean">
        <property name="functionsMap">
            <map>
                <entry key="hash">
                    <bean class="pw.cdmi.core.utils.HashTool" />
                </entry>
            </map>
        </property>
        <property name="configLocations">
            <list>
            	<value>classpath:context/routing/fileobject_attachment-rules.xml</value>
                <value>classpath:context/routing/fileobject-rules.xml</value>
                <value>classpath:context/routing/fs_endpoint-rules.xml</value>
                <value>classpath:context/routing/multipart_fileobject-rules.xml</value>
                <value>classpath:context/routing/systemclusters-rules.xml</value>
                <value>classpath:context/routing/systemconfig-rules.xml</value>
                <value>classpath:pw/cdmi/common/job/manage/dao/systemjob-rules.xml</value>
                <value>classpath:pw/cdmi/common/slavedb/domain/DatabaseAddr-rules.xml</value>
                <value>classpath:context/routing/copyexetime-rules.xml</value>
                <value>classpath:context/routing/realtimecopytask-rules.xml</value>
                <value>classpath:context/routing/realtimecopytaskpart-rules.xml</value>
                <value>classpath:context/routing/fileobject-delete-task-rules.xml</value>
                <value>classpath:context/routing/fileobject-delete-log-rules.xml</value>
            </list>
        </property>
    </bean>

	<!--DataSource TransactionManager -->
    <bean id="transactionManager" class="com.alibaba.cobar.client.transaction.MultipleDataSourcesTransactionManager">
        <property name="cobarDataSourceService" ref="cobarDataSources" />
        <property name="globalRollbackOnParticipationFailure" value="true" />
        <!-- SYNCHRONIZATION_NEVER, Cobar Client can not support transactionSynchronization -->
        <property name="transactionSynchronization" value="2" />
    </bean>
    
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />

</beans>